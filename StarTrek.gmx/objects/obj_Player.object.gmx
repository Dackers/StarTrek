<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>accel=500;
rot=400;
left=ord('A');
right=ord('D');
forward=ord('W');
backward=ord('S');
port=ord('Q');
starboard=ord('E');
phaser=mb_left;
torpedo=mb_right;
phaserFireRate = room_speed/9.25;
torpedoFireRate = room_speed/1.5;
canShoot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Photon Torpedos
canShoot=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phasers
canShoot = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/* Movement */
if keyboard_check(right)
{
    physics_apply_torque(rot);
}
if keyboard_check(left)
{
    physics_apply_torque(-rot);
}
if keyboard_check(forward)
{
    physics_apply_local_force(-sprite_width/2,0,accel,0);
}
if keyboard_check(backward)
{
    physics_apply_local_force(-sprite_width/2,0,-accel,0);
}
if keyboard_check(starboard)
{
    physics_apply_local_force(-sprite_width/2,0,0,accel/4);
}
if keyboard_check(port)
{
    physics_apply_local_force(-sprite_width/2,0,0,-accel/4);
}

/* Weapons */
if mouse_check_button(torpedo) &amp;&amp; canShoot
{
    canShoot=false;
    alarm[2]=torpedoFireRate;
    with (instance_create(x+lengthdir_x(32,phy_rotation*-1),y+lengthdir_y(32,phy_rotation*-1),obj_torpedo))
    {
        phy_bullet=false;
        phy_rotation=other.phy_rotation;
        physics_apply_local_force(0,0,400,0);
    }
}
if mouse_check_button(phaser) &amp;&amp; canShoot
{
    canShoot=false;
    alarm[1]=phaserFireRate;
    with (instance_create(x+lengthdir_x(48,phy_rotation*-1),y+lengthdir_y(48,phy_rotation*-1),obj_phaser))
    {
        phy_bullet=false;
        phy_rotation=other.phy_rotation;
        phy_fixed_rotation = true;
        physics_apply_local_impulse(-sprite_width/2,0,100,0);
    }
}

/* Screen Wrap */
if phy_position_x&gt;room_width+32
{
    phy_position_x=-32;
}
if phy_position_x&lt;-32
{
    phy_position_x=room_width+32;
}
if phy_position_y&gt;room_height+32
{
    phy_position_y=-32;
}
if phy_position_y&lt;-32
{
    phy_position_y=room_height+32;
}

/* Make camera follow player and keep player centered */
//view_xview[0] = phy_position_x - view_wview[0] / 2
//view_yview[0] = phy_position_y - view_hview[0] / 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.5</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>132,0</point>
    <point>132,64</point>
    <point>0,64</point>
  </PhysicsShapePoints>
</object>
